cn/jiguang/api/BaseLogger = CN.Jiguang.Api.BaseLogger
  <init>()V = .ctor()
  getCommonTag()Ljava/lang/String; = CommonTag
  _d(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = _d(string, string, params Java.Lang.Object[])
  d(Ljava/lang/String;Ljava/lang/String;)V = D(string, string)
  d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = D(string, string, Java.Lang.Throwable)
  dd(Ljava/lang/String;Ljava/lang/String;)V = Dd(string, string)
  dd(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = Dd(string, string, Java.Lang.Throwable)
  e(Ljava/lang/String;Ljava/lang/String;)V = E(string, string)
  e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = E(string, string, Java.Lang.Throwable)
  ee(Ljava/lang/String;Ljava/lang/String;)V = Ee(string, string)
  ee(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = Ee(string, string, Java.Lang.Throwable)
  flushCached2File()V = FlushCached2File()
  i(Ljava/lang/String;Ljava/lang/String;)V = I(string, string)
  i(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = I(string, string, Java.Lang.Throwable)
  ii(Ljava/lang/String;Ljava/lang/String;)V = Ii(string, string)
  ii(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = Ii(string, string, Java.Lang.Throwable)
  v(Ljava/lang/String;Ljava/lang/String;)V = V(string, string)
  v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = V(string, string, Java.Lang.Throwable)
  vv(Ljava/lang/String;Ljava/lang/String;)V = Vv(string, string)
  vv(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = Vv(string, string, Java.Lang.Throwable)
  w(Ljava/lang/String;Ljava/lang/String;)V = W(string, string)
  w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = W(string, string, Java.Lang.Throwable)
  ww(Ljava/lang/String;Ljava/lang/String;)V = Ww(string, string)
  ww(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V = Ww(string, string, Java.Lang.Throwable)
cn/jiguang/api/BasePreferenceManager = CN.Jiguang.Api.BasePreferenceManager
  <init>()V = .ctor()
  commitBoolean(Landroid/content/Context;Ljava/lang/String;Z)V = CommitBoolean(Android.Content.Context, string, bool)
  commitBoolean(Ljava/lang/String;Z)V = CommitBoolean(string, bool)
  commitInt(Landroid/content/Context;Ljava/lang/String;I)V = CommitInt(Android.Content.Context, string, int)
  commitInt(Ljava/lang/String;I)V = CommitInt(string, int)
  commitLong(Landroid/content/Context;Ljava/lang/String;J)V = CommitLong(Android.Content.Context, string, long)
  commitLong(Ljava/lang/String;J)V = CommitLong(string, long)
  commitString(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = CommitString(Android.Content.Context, string, string)
  commitString(Ljava/lang/String;Ljava/lang/String;)V = CommitString(string, string)
  commitStringWithEncryption(Ljava/lang/String;Ljava/lang/String;)V = CommitStringWithEncryption(string, string)
  getBoolean(Landroid/content/Context;Ljava/lang/String;Z)Ljava/lang/Boolean; = GetBoolean(Android.Content.Context, string, bool)
  getBoolean(Ljava/lang/String;Z)Ljava/lang/Boolean; = GetBoolean(string, bool)
  getDecryptString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetDecryptString(string, string)
  getEncryptedString(Ljava/lang/String;)Ljava/lang/String; = GetEncryptedString(string)
  getInt(Landroid/content/Context;Ljava/lang/String;I)I = GetInt(Android.Content.Context, string, int)
  getInt(Ljava/lang/String;I)I = GetInt(string, int)
  getLong(Landroid/content/Context;Ljava/lang/String;J)J = GetLong(Android.Content.Context, string, long)
  getLong(Ljava/lang/String;J)J = GetLong(string, long)
  getString(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetString(Android.Content.Context, string, string)
  getString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetString(string, string)
  getStringUnencrypted(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetStringUnencrypted(string, string)
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
  removeAll()V = RemoveAll()
  removeKey(Ljava/lang/String;)V = RemoveKey(string)
cn/jiguang/api/JAction = CN.Jiguang.Api.IJAction
  getSdkVersion()Ljava/lang/String; = SdkVersion
  dispatchMessage(Landroid/content/Context;JILjava/lang/Object;Ljava/nio/ByteBuffer;)J = DispatchMessage(Android.Content.Context, long, int, Java.Lang.Object, Java.Nio.ByteBuffer)
  dispatchTimeOutMessage(Landroid/content/Context;JJI)V = DispatchTimeOutMessage(Android.Content.Context, long, long, int)
  getBinderByType(Ljava/lang/String;)Landroid/os/IBinder; = GetBinderByType(string)
  handleMessage(Landroid/content/Context;JLjava/lang/Object;)V = HandleMessage(Android.Content.Context, long, Java.Lang.Object)
  isSupportedCMD(I)Z = IsSupportedCMD(int)
  onActionRun(Landroid/content/Context;JLandroid/os/Bundle;Ljava/lang/Object;)V = OnActionRun(Android.Content.Context, long, Android.OS.Bundle, Java.Lang.Object)
  onEvent(Landroid/content/Context;JI)V = OnEvent(Android.Content.Context, long, int)
cn/jiguang/api/JAnalyticsAction = CN.Jiguang.Api.IJAnalyticsAction
  dispatchPause(Landroid/content/Context;)V = DispatchPause(Android.Content.Context)
  dispatchResume(Landroid/content/Context;)V = DispatchResume(Android.Content.Context)
  dispatchStatus(Landroid/content/Context;Ljava/lang/String;)V = DispatchStatus(Android.Content.Context, string)
cn/jiguang/api/JCoreInterface = CN.Jiguang.Api.JCoreInterface
  <init>()V = .ctor()
  getAesConfig()Z = AesConfig
  getAppKey()Ljava/lang/String; = AppKey
  getChannel()Ljava/lang/String; = Channel
  getCommonConfigAppkey()Ljava/lang/String; = CommonConfigAppkey
  getDebugMode()Z = DebugMode
  setDebugMode(Z)V = DebugMode
  isTcpConnected()Z = IsTcpConnected
  isValidRegistered()Z = IsValidRegistered
  getNextRid()J = NextRid
  getReportTime()J = ReportTime
  getRuningFlag()Z = RuningFlag
  getSid()I = Sid
  getUid()J = Uid
  canCallDirect()Z = CanCallDirect()
  getBinderByType(Ljava/lang/String;Ljava/lang/String;)Landroid/os/IBinder; = GetBinderByType(string, string)
  getConnectionState(Landroid/content/Context;)Z = GetConnectionState(Android.Content.Context)
  getDeviceId(Landroid/content/Context;)Ljava/lang/String; = GetDeviceId(Android.Content.Context)
  getHttpConfig(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String; = GetHttpConfig(Android.Content.Context, string)
  getRegistrationID(Landroid/content/Context;)Ljava/lang/String; = GetRegistrationID(Android.Content.Context)
  init(Landroid/content/Context;Z)Z = Init(Android.Content.Context, bool)
  initAction(Ljava/lang/String;Ljava/lang/Class;)V = InitAction(string, Java.Lang.Class)
  initCrashHandler(Landroid/content/Context;)V = InitCrashHandler(Android.Content.Context)
  onFragmentPause(Landroid/content/Context;Ljava/lang/String;)V = OnFragmentPause(Android.Content.Context, string)
  onFragmentResume(Landroid/content/Context;Ljava/lang/String;)V = OnFragmentResume(Android.Content.Context, string)
  onKillProcess(Landroid/content/Context;)V = OnKillProcess(Android.Content.Context)
  register(Landroid/content/Context;)V = Register(Android.Content.Context)
  reportHttpData(Landroid/content/Context;Ljava/lang/Object;Ljava/lang/String;)Z = ReportHttpData(Android.Content.Context, Java.Lang.Object, string)
  requestPermission(Landroid/content/Context;)V = RequestPermission(Android.Content.Context)
  restart(Landroid/content/Context;Ljava/lang/String;Landroid/os/Bundle;Z)V = Restart(Android.Content.Context, string, Android.OS.Bundle, bool)
  sendAction(Landroid/content/Context;Ljava/lang/String;Landroid/os/Bundle;)V = SendAction(Android.Content.Context, string, Android.OS.Bundle)
  sendData(Landroid/content/Context;Ljava/lang/String;I[B)V = SendData(Android.Content.Context, string, int, byte[])
  sendRequestData(Landroid/content/Context;Ljava/lang/String;I[B)V = SendRequestData(Android.Content.Context, string, int, byte[])
  setAnalysisAction(Lcn/jiguang/api/JAnalyticsAction;)V = SetAnalysisAction(CN.Jiguang.Api.IJAnalyticsAction)
  setCanLaunchedStoppedService(Z)V = SetCanLaunchedStoppedService(bool)
  setImLBSEnable(Landroid/content/Context;Z)V = SetImLBSEnable(Android.Content.Context, bool)
  stop(Landroid/content/Context;Ljava/lang/String;Landroid/os/Bundle;)V = Stop(Android.Content.Context, string, Android.OS.Bundle)
  stopCrashHandler(Landroid/content/Context;)V = StopCrashHandler(Android.Content.Context)
cn/jiguang/api/JProtocol = CN.Jiguang.Api.JProtocol
  <init>(ZIIJ)V = .ctor(bool, int, int, long)
  <init>(ZIIJIJ)V = .ctor(bool, int, int, long, int, long)
  <init>(ZLjava/lang/Object;Ljava/nio/ByteBuffer;)V = .ctor(bool, Java.Lang.Object, Java.Nio.ByteBuffer)
  body = Body
  DEFAULT_RESP_CODE = DefaultRespCode
  DEFAULT_RID = DefaultRid
  DEFAULT_SID = DefaultSid
  NO_JUID = NoJuid
  NO_RESP_CODE = NoRespCode
  NO_SID = NoSid
  getBody()Ljava/nio/ByteBuffer; = Body
  getCommand()I = Command
  isNeedParseeErrorMsg()Z = IsNeedParseeErrorMsg
  getJuid()J = Juid
  getName()Ljava/lang/String; = Name
  getRid()Ljava/lang/Long; = Rid
  getSid()I = Sid
  getVersion()I = Version
  parseBody()V = ParseBody()
  writeBody()V = WriteBody()
  writeBodyAndToBytes()[B = WriteBodyAndToBytes()
  writeBytes([B)V = WriteBytes(byte[])
  writeInt1(I)V = WriteInt1(int)
  writeInt2(I)V = WriteInt2(int)
  writeInt4(I)V = WriteInt4(int)
  writeLong8(J)V = WriteLong8(long)
  writeTlv2(Ljava/lang/String;)V = WriteTlv2(string)
cn/jiguang/api/JRequest = CN.Jiguang.Api.JRequest
  <init>(IIJ)V = .ctor(int, int, long)
  <init>(Ljava/lang/Object;Ljava/nio/ByteBuffer;)V = .ctor(Java.Lang.Object, Java.Nio.ByteBuffer)
  setJuid(J)V = SetJuid(long)
  setSid(I)V = SetSid(int)
cn/jiguang/api/JResponse = CN.Jiguang.Api.JResponse
  <init>(IIJJILjava/lang/String;)V = .ctor(int, int, long, long, int, string)
  <init>(Ljava/lang/Object;Ljava/nio/ByteBuffer;)V = .ctor(Java.Lang.Object, Java.Nio.ByteBuffer)
  code = Code
  parseBody()V = ParseBody()
  writeBody()V = WriteBody()
cn/jiguang/api/MultiSpHelper = CN.Jiguang.Api.MultiSpHelper
  <init>()V = .ctor()
  commitBoolean(Landroid/content/Context;Ljava/lang/String;Z)V = CommitBoolean(Android.Content.Context, string, bool)
  commitInt(Landroid/content/Context;Ljava/lang/String;I)V = CommitInt(Android.Content.Context, string, int)
  commitLong(Landroid/content/Context;Ljava/lang/String;J)V = CommitLong(Android.Content.Context, string, long)
  commitString(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = CommitString(Android.Content.Context, string, string)
  getBoolean(Landroid/content/Context;Ljava/lang/String;Z)Z = GetBoolean(Android.Content.Context, string, bool)
  getInt(Landroid/content/Context;Ljava/lang/String;I)I = GetInt(Android.Content.Context, string, int)
  getLong(Landroid/content/Context;Ljava/lang/String;J)J = GetLong(Android.Content.Context, string, long)
  getString(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetString(Android.Content.Context, string, string)
cn/jiguang/api/SdkType = CN.Jiguang.Api.SdkType
  JANALYTICS = Janalytics
  JCORE = Jcore
  JMESSAGE = Jmessage
  JPUSH = Jpush
  JSHARE = Jshare
  valueOf(Ljava/lang/String;)Lcn/jiguang/api/SdkType; = ValueOf(string)
  values()[Lcn/jiguang/api/SdkType; = Values()
cn/jiguang/api/utils/ByteBufferUtils = CN.Jiguang.Api.Utils.ByteBufferUtils
  <init>()V = .ctor()
  ERROR_CODE = ErrorCode
  get(Ljava/nio/ByteBuffer;[BLcn/jiguang/api/JResponse;)Ljava/nio/ByteBuffer; = Get(Java.Nio.ByteBuffer, byte[], CN.Jiguang.Api.JResponse)
  get(Ljava/nio/ByteBuffer;Lcn/jiguang/api/JResponse;)Ljava/lang/Byte; = Get(Java.Nio.ByteBuffer, CN.Jiguang.Api.JResponse)
  getInt(Ljava/nio/ByteBuffer;Lcn/jiguang/api/JResponse;)I = GetInt(Java.Nio.ByteBuffer, CN.Jiguang.Api.JResponse)
  getLong(Ljava/nio/ByteBuffer;Lcn/jiguang/api/JResponse;)J = GetLong(Java.Nio.ByteBuffer, CN.Jiguang.Api.JResponse)
  getShort(Ljava/nio/ByteBuffer;Lcn/jiguang/api/JResponse;)S = GetShort(Java.Nio.ByteBuffer, CN.Jiguang.Api.JResponse)
cn/jiguang/api/utils/OutputDataUtil = CN.Jiguang.Api.Utils.OutputDataUtil
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  current()I = Current()
  encodeZigZag32(I)I = EncodeZigZag32(int)
  encodeZigZag64(J)J = EncodeZigZag64(long)
  jump(I)V = Jump(int)
  restore()V = Restore()
  save()V = Save()
  toByteArray()[B = ToByteArray()
  writeByteArray([B)V = WriteByteArray(byte[])
  writeByteArray([BII)V = WriteByteArray(byte[], int, int)
  writeByteArrayincludeLength([B)V = WriteByteArrayincludeLength(byte[])
  writeCountedString([B)V = WriteCountedString(byte[])
  writeRawLittleEndian16(I)V = WriteRawLittleEndian16(int)
  writeRawLittleEndian32(I)V = WriteRawLittleEndian32(int)
  writeRawLittleEndian64(J)V = WriteRawLittleEndian64(long)
  writeU16(I)V = WriteU16(int)
  writeU16At(II)V = WriteU16At(int, int)
  writeU32(J)V = WriteU32(long)
  writeU32At(JI)V = WriteU32At(long, int)
  writeU64(J)V = WriteU64(long)
  writeU8(I)V = WriteU8(int)
cn/jiguang/api/utils/ProtocolUtil = CN.Jiguang.Api.Utils.ProtocolUtil
  <init>()V = .ctor()
  fillIntData([BII)V = FillIntData(byte[], int, int)
  fillStringData([BLjava/lang/String;I)V = FillStringData(byte[], string, int)
  fixedStringToBytes(Ljava/lang/String;I)[B = FixedStringToBytes(string, int)
  getBytes(Ljava/nio/ByteBuffer;)[B = GetBytes(Java.Nio.ByteBuffer)
  getBytesConsumed(Ljava/nio/ByteBuffer;)[B = GetBytesConsumed(Java.Nio.ByteBuffer)
  getDefaultByte(I)[B = GetDefaultByte(int)
  getString(Ljava/nio/ByteBuffer;I)Ljava/lang/String; = GetString(Java.Nio.ByteBuffer, int)
  getTlv2(Ljava/nio/ByteBuffer;)Ljava/lang/String; = GetTlv2(Java.Nio.ByteBuffer)
  getTlv2(Ljava/nio/ByteBuffer;Lcn/jiguang/api/JResponse;)Ljava/lang/String; = GetTlv2(Java.Nio.ByteBuffer, CN.Jiguang.Api.JResponse)
  int2ByteArray(I)[B = Int2ByteArray(int)
  long2ByteArray(J)[B = Long2ByteArray(long)
  main([Ljava/lang/String;)V = Main(string[])
  short2ByteArray(S)[B = Short2ByteArray(short)
  tlv2ToByteArray(Ljava/lang/String;)[B = Tlv2ToByteArray(string)
cn/jiguang/net/HttpConstants = CN.Jiguang.Net.HttpConstants
  <init>()V = .ctor()
  CACHE_CONTROL = CacheControl
  EXPIRES = Expires
  NET_ERROR_CODE = NetErrorCode
  NET_MALTFORMED_ERROR = NetMaltformedError
  NET_SSL_EXECPTION = NetSslExecption
  NET_TIMEOUT_CODE = NetTimeoutCode
  NET_UNKNOW_HOST = NetUnknowHost
  STACK_OVER_EXECPTION = StackOverExecption
  UNKNOW_EXECPTION = UnknowExecption
cn/jiguang/net/HttpRequest = CN.Jiguang.Net.HttpRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/util/Map;)V = .ctor(string, System.Collections.Generic.IDictionary<string, string>)
  getBody()Ljava/lang/Object; = Body
  setBody(Ljava/lang/Object;)V = Body
  getConnectTimeout()I = ConnectTimeout
  setConnectTimeout(I)V = ConnectTimeout
  isDoInPut()Z = DoInPut
  setDoInPut(Z)V = DoInPut
  isDoOutPut()Z = DoOutPut
  setDoOutPut(Z)V = DoOutPut
  isHaveRspData()Z = HaveRspData
  setHaveRspData(Z)V = HaveRspData
  getParasMap()Ljava/util/Map; = ParasMap
  setParasMap(Ljava/util/Map;)V = ParasMap
  getReadTimeout()I = ReadTimeout
  setReadTimeout(I)V = ReadTimeout
  getRequestProperties()Ljava/util/Map; = RequestProperties
  setRequestProperties(Ljava/util/Map;)V = RequestProperties
  getUrl()Ljava/lang/String; = Url
  setUrl(Ljava/lang/String;)V = Url
  isUseCaches()Z = UseCaches
  setUseCaches(Z)V = UseCaches
  getParas()[B = GetParas()
  getRequestProperty(Ljava/lang/String;)Ljava/lang/String; = GetRequestProperty(string)
  setRequestProperty(Ljava/lang/String;Ljava/lang/String;)V = SetRequestProperty(string, string)
  setUserAgent(Ljava/lang/String;)V = SetUserAgent(string)
cn/jiguang/net/HttpResponse = CN.Jiguang.Net.HttpResponse
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  getExpiredTime()J = ExpiredTime
  setExpiredTime(J)V = ExpiredTime
  getExpiresHeader()Ljava/lang/String; = ExpiresHeader
  isExpired()Z = IsExpired
  isInCache()Z = IsInCache
  getResponseBody()Ljava/lang/String; = ResponseBody
  setResponseBody(Ljava/lang/String;)V = ResponseBody
  getResponseCode()I = ResponseCode
  setResponseCode(I)V = ResponseCode
  getType()I = Type
  setType(I)V = Type
  getUrl()Ljava/lang/String; = Url
  setUrl(Ljava/lang/String;)V = Url
  setInCache(Z)Lcn/jiguang/net/HttpResponse; = SetInCache(bool)
  setResponseHeader(Ljava/lang/String;Ljava/lang/String;)V = SetResponseHeader(string, string)
  setResponseHeaders(Ljava/util/Map;)V = SetResponseHeaders(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
cn/jiguang/net/HttpUtils = CN.Jiguang.Net.HttpUtils
  <init>()V = .ctor()
  ENCODING_UTF_8 = EncodingUtf8
  EQUAL_SIGN = EqualSign
  HTTP_DEFUALT_PROXY = HttpDefualtProxy
  PARAMETERS_SEPARATOR = ParametersSeparator
  PATHS_SEPARATOR = PathsSeparator
  URL_AND_PARA_SEPARATOR = UrlAndParaSeparator
  appendParaToUrl(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = AppendParaToUrl(string, string, string)
  createSSLConnection()V = CreateSSLConnection()
  getHttpURLConnectionWithProxy(Landroid/content/Context;Ljava/lang/String;)Ljava/net/HttpURLConnection; = GetHttpURLConnectionWithProxy(Android.Content.Context, string)
  getUrlWithParas(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/String; = GetUrlWithParas(string, System.Collections.Generic.IDictionary<string, string>)
  getUrlWithValueEncodeParas(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/String; = GetUrlWithValueEncodeParas(string, System.Collections.Generic.IDictionary<string, string>)
  httpGet(Landroid/content/Context;Lcn/jiguang/net/HttpRequest;)Lcn/jiguang/net/HttpResponse; = HttpGet(Android.Content.Context, CN.Jiguang.Net.HttpRequest)
  httpGet(Landroid/content/Context;Lcn/jiguang/net/HttpRequest;Lcn/jiguang/net/HttpUtils$HttpListener;)V = HttpGet(Android.Content.Context, CN.Jiguang.Net.HttpRequest, CN.Jiguang.Net.HttpUtils.HttpListener)
  httpGet(Landroid/content/Context;Ljava/lang/String;)Lcn/jiguang/net/HttpResponse; = HttpGet(Android.Content.Context, string)
  httpGet(Landroid/content/Context;Ljava/lang/String;Lcn/jiguang/net/HttpUtils$HttpListener;)V = HttpGet(Android.Content.Context, string, CN.Jiguang.Net.HttpUtils.HttpListener)
  httpGetString(Landroid/content/Context;Lcn/jiguang/net/HttpRequest;)Ljava/lang/String; = HttpGetString(Android.Content.Context, CN.Jiguang.Net.HttpRequest)
  httpGetString(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String; = HttpGetString(Android.Content.Context, string)
  httpPost(Landroid/content/Context;Lcn/jiguang/net/HttpRequest;)Lcn/jiguang/net/HttpResponse; = HttpPost(Android.Content.Context, CN.Jiguang.Net.HttpRequest)
  httpPost(Landroid/content/Context;Ljava/lang/String;)Lcn/jiguang/net/HttpResponse; = HttpPost(Android.Content.Context, string)
  httpPostString(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String; = HttpPostString(Android.Content.Context, string)
  httpPostString(Landroid/content/Context;Ljava/lang/String;Ljava/util/Map;)Ljava/lang/String; = HttpPostString(Android.Content.Context, string, System.Collections.Generic.IDictionary<string, string>)
  joinParas(Ljava/util/Map;)Ljava/lang/String; = JoinParas(System.Collections.Generic.IDictionary<string, string>)
  joinParasWithEncodedValue(Ljava/util/Map;)Ljava/lang/String; = JoinParasWithEncodedValue(System.Collections.Generic.IDictionary<string, string>)
  parseGmtTime(Ljava/lang/String;)J = ParseGmtTime(string)
  readInputStream(Ljava/io/InputStream;)[B = ReadInputStream(System.IO.Stream)
  setURLConnection(Ljava/util/Map;Ljava/net/HttpURLConnection;)V = SetURLConnection(System.Collections.Generic.IDictionary<string, string>, Java.Net.HttpURLConnection)
cn/jiguang/service/Protocol = CN.Jiguang.Service.Protocol
  GetSdkVersion()I = SdkVersion
  Close(J)I = Close(long)
  InitConn()J = InitConn()
  InitPush(JLjava/lang/String;I)I = InitPush(long, string, int)
  LogPush(J[B[BI)I = LogPush(long, byte[], byte[], int)
  RecvPush(J[BI)I = RecvPush(long, byte[], int)
  SendData(J[BI)I = SendData(long, byte[], int)
  Stop(J)I = Stop(long)
cn/jpush/android/api/BasicPushNotificationBuilder = CN.Jpush.Android.Api.BasicPushNotificationBuilder
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  a = A
  developerArg0 = DeveloperArg0
  notificationDefaults = NotificationDefaults
  notificationFlags = NotificationFlags
  statusBarDrawable = StatusBarDrawable
cn/jpush/android/api/CustomPushNotificationBuilder = CN.Jpush.Android.Api.CustomPushNotificationBuilder
  <init>(Landroid/content/Context;IIII)V = .ctor(Android.Content.Context, int, int, int, int)
  layout = Layout
  layoutContentId = LayoutContentId
  layoutIconDrawable = LayoutIconDrawable
  layoutIconId = LayoutIconId
  layoutTitleId = LayoutTitleId
cn/jpush/android/api/DefaultPushNotificationBuilder = CN.Jpush.Android.Api.DefaultPushNotificationBuilder
  <init>()V = .ctor()
  getDeveloperArg0()Ljava/lang/String; = DeveloperArg0
  buildNotification(Ljava/util/Map;)Landroid/app/Notification; = BuildNotification(System.Collections.Generic.IDictionary<string, string>)
cn/jpush/android/api/InstrumentedActivity = CN.Jpush.Android.Api.InstrumentedActivity
  <init>()V = .ctor()
  onStart()V = OnStart()
  onStop()V = OnStop()
cn/jpush/android/api/InstrumentedListActivity = CN.Jpush.Android.Api.InstrumentedListActivity
  <init>()V = .ctor()
  onStart()V = OnStart()
  onStop()V = OnStop()
cn/jpush/android/api/JPushInterface = CN.Jpush.Android.Api.JPushInterface
  <init>()V = .ctor()
  ACTION_ACTIVITY_OPENDED = ActionActivityOpended
  ACTION_CONNECTION_CHANGE = ActionConnectionChange
  ACTION_MESSAGE_RECEIVED = ActionMessageReceived
  ACTION_NOTIFICATION_CLICK_ACTION = ActionNotificationClickAction
  ACTION_NOTIFICATION_OPENED = ActionNotificationOpened
  ACTION_NOTIFICATION_RECEIVED = ActionNotificationReceived
  ACTION_NOTIFICATION_RECEIVED_PROXY = ActionNotificationReceivedProxy
  ACTION_REGISTRATION_ID = ActionRegistrationId
  ACTION_RESTOREPUSH = ActionRestorepush
  ACTION_RICHPUSH_CALLBACK = ActionRichpushCallback
  ACTION_STATUS = ActionStatus
  ACTION_STOPPUSH = ActionStoppush
  EXTRA_ACTIVITY_PARAM = ExtraActivityParam
  EXTRA_ALERT = ExtraAlert
  EXTRA_APP_KEY = ExtraAppKey
  EXTRA_BIG_PIC_PATH = ExtraBigPicPath
  EXTRA_BIG_TEXT = ExtraBigText
  EXTRA_CONNECTION_CHANGE = ExtraConnectionChange
  EXTRA_CONTENT_TYPE = ExtraContentType
  EXTRA_EXTRA = ExtraExtra
  EXTRA_INBOX = ExtraInbox
  EXTRA_MESSAGE = ExtraMessage
  EXTRA_MSG_ID = ExtraMsgId
  EXTRA_NOTI_CATEGORY = ExtraNotiCategory
  EXTRA_NOTIFICATION_ACTION_EXTRA = ExtraNotificationActionExtra
  EXTRA_NOTIFICATION_DEVELOPER_ARG0 = ExtraNotificationDeveloperArg0
  EXTRA_NOTIFICATION_ID = ExtraNotificationId
  EXTRA_NOTIFICATION_TITLE = ExtraNotificationTitle
  EXTRA_NOTI_PRIORITY = ExtraNotiPriority
  EXTRA_NOTI_TYPE = ExtraNotiType
  EXTRA_PUSH_ID = ExtraPushId
  EXTRA_REGISTRATION_ID = ExtraRegistrationId
  EXTRA_RICHPUSH_FILE_PATH = ExtraRichpushFilePath
  EXTRA_RICHPUSH_FILE_TYPE = ExtraRichpushFileType
  EXTRA_RICHPUSH_HTML_PATH = ExtraRichpushHtmlPath
  EXTRA_RICHPUSH_HTML_RES = ExtraRichpushHtmlRes
  EXTRA_STATUS = ExtraStatus
  EXTRA_TITLE = ExtraTitle
  addLocalNotification(Landroid/content/Context;Lcn/jpush/android/data/JPushLocalNotification;)V = AddLocalNotification(Android.Content.Context, CN.Jpush.Android.Data.JPushLocalNotification)
  clearAllNotifications(Landroid/content/Context;)V = ClearAllNotifications(Android.Content.Context)
  clearLocalNotifications(Landroid/content/Context;)V = ClearLocalNotifications(Android.Content.Context)
  clearNotificationById(Landroid/content/Context;I)V = ClearNotificationById(Android.Content.Context, int)
  filterValidTags(Ljava/util/Set;)Ljava/util/Set; = FilterValidTags(System.Collections.Generic.ICollection<string>)
  getConnectionState(Landroid/content/Context;)Z = GetConnectionState(Android.Content.Context)
  getRegistrationID(Landroid/content/Context;)Ljava/lang/String; = GetRegistrationID(Android.Content.Context)
  getStringTags(Ljava/util/Set;)Ljava/lang/String; = GetStringTags(System.Collections.Generic.ICollection<string>)
  getUdid(Landroid/content/Context;)Ljava/lang/String; = GetUdid(Android.Content.Context)
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
  initCrashHandler(Landroid/content/Context;)V = InitCrashHandler(Android.Content.Context)
  isPushStopped(Landroid/content/Context;)Z = IsPushStopped(Android.Content.Context)
  onFragmentPause(Landroid/content/Context;Ljava/lang/String;)V = OnFragmentPause(Android.Content.Context, string)
  onFragmentResume(Landroid/content/Context;Ljava/lang/String;)V = OnFragmentResume(Android.Content.Context, string)
  onKillProcess(Landroid/content/Context;)V = OnKillProcess(Android.Content.Context)
  onPause(Landroid/content/Context;)V = OnPause(Android.Content.Context)
  onResume(Landroid/content/Context;)V = OnResume(Android.Content.Context)
  removeLocalNotification(Landroid/content/Context;J)V = RemoveLocalNotification(Android.Content.Context, long)
  reportNotificationOpened(Landroid/content/Context;Ljava/lang/String;)V = ReportNotificationOpened(Android.Content.Context, string)
  requestPermission(Landroid/content/Context;)V = RequestPermission(Android.Content.Context)
  resumePush(Landroid/content/Context;)V = ResumePush(Android.Content.Context)
  setAlias(Landroid/content/Context;Ljava/lang/String;Lcn/jpush/android/api/TagAliasCallback;)V = SetAlias(Android.Content.Context, string, CN.Jpush.Android.Api.ITagAliasCallback)
  setAliasAndTags(Landroid/content/Context;Ljava/lang/String;Ljava/util/Set;)V = SetAliasAndTags(Android.Content.Context, string, System.Collections.Generic.ICollection<string>)
  setAliasAndTags(Landroid/content/Context;Ljava/lang/String;Ljava/util/Set;Lcn/jpush/android/api/TagAliasCallback;)V = SetAliasAndTags(Android.Content.Context, string, System.Collections.Generic.ICollection<string>, CN.Jpush.Android.Api.ITagAliasCallback)
  setDebugMode(Z)V = SetDebugMode(bool)
  setDefaultPushNotificationBuilder(Lcn/jpush/android/api/BasicPushNotificationBuilder;)V = SetDefaultPushNotificationBuilder(CN.Jpush.Android.Api.BasicPushNotificationBuilder)
  setLatestNotificationNumber(Landroid/content/Context;I)V = SetLatestNotificationNumber(Android.Content.Context, int)
  setPushNotificationBuilder(Ljava/lang/Integer;Lcn/jpush/android/api/DefaultPushNotificationBuilder;)V = SetPushNotificationBuilder(Java.Lang.Integer, CN.Jpush.Android.Api.DefaultPushNotificationBuilder)
  setPushTime(Landroid/content/Context;Ljava/util/Set;II)V = SetPushTime(Android.Content.Context, System.Collections.Generic.ICollection<Java.Lang.Integer>, int, int)
  setSilenceTime(Landroid/content/Context;IIII)V = SetSilenceTime(Android.Content.Context, int, int, int, int)
  setStatisticsEnable(Z)V = SetStatisticsEnable(bool)
  setStatisticsSessionTimeout(J)V = SetStatisticsSessionTimeout(long)
  setTags(Landroid/content/Context;Ljava/util/Set;Lcn/jpush/android/api/TagAliasCallback;)V = SetTags(Android.Content.Context, System.Collections.Generic.ICollection<string>, CN.Jpush.Android.Api.ITagAliasCallback)
  stopCrashHandler(Landroid/content/Context;)V = StopCrashHandler(Android.Content.Context)
  stopPush(Landroid/content/Context;)V = StopPush(Android.Content.Context)
cn/jpush/android/api/MultiActionsNotificationBuilder = CN.Jpush.Android.Api.MultiActionsNotificationBuilder
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  mContext = MContext
  addJPushAction(ILjava/lang/String;Ljava/lang/String;)V = AddJPushAction(int, string, string)
cn/jpush/android/api/PushNotificationBuilder = CN.Jpush.Android.Api.IPushNotificationBuilder
  getDeveloperArg0()Ljava/lang/String; = DeveloperArg0
  buildNotification(Ljava/util/Map;)Landroid/app/Notification; = BuildNotification(System.Collections.Generic.IDictionary<string, string>)
cn/jpush/android/api/TagAliasCallback = CN.Jpush.Android.Api.ITagAliasCallback
  gotResult(ILjava/lang/String;Ljava/util/Set;)V = GotResult(int, string, System.Collections.Generic.ICollection<string>)
cn/jpush/android/data/JPushLocalNotification = CN.Jpush.Android.Data.JPushLocalNotification
  <init>()V = .ctor()
  getBroadcastTime()J = BroadcastTime
  setBroadcastTime(J)V = BroadcastTime
  getBuilderId()J = BuilderId
  setBuilderId(J)V = BuilderId
  getContent()Ljava/lang/String; = Content
  setContent(Ljava/lang/String;)V = Content
  getExtras()Ljava/lang/String; = Extras
  setExtras(Ljava/lang/String;)V = Extras
  getNotificationId()J = NotificationId
  setNotificationId(J)V = NotificationId
  getTitle()Ljava/lang/String; = Title
  setTitle(Ljava/lang/String;)V = Title
  setBroadcastTime(IIIIII)V = SetBroadcastTime(int, int, int, int, int, int)
  setBroadcastTime(Ljava/util/Date;)V = SetBroadcastTime(Java.Util.Date)
  toJSON()Ljava/lang/String; = ToJSON()
cn/jpush/android/data/JPushView = CN.Jpush.Android.Data.JPushView
cn/jpush/android/service/AlarmReceiver = CN.Jpush.Android.Service.AlarmReceiver
  <init>()V = .ctor()
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
cn/jpush/android/service/DaemonService = CN.Jpush.Android.Service.DaemonService
  <init>()V = .ctor()
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
cn/jpush/android/service/DownloadService = CN.Jpush.Android.Service.DownloadService
  <init>()V = .ctor()
  onHandleIntent(Landroid/content/Intent;)V = OnHandleIntent(Android.Content.Intent)
cn/jpush/android/service/PushReceiver = CN.Jpush.Android.Service.PushReceiver
  <init>()V = .ctor()
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
cn/jpush/android/service/PushService = CN.Jpush.Android.Service.PushService
  <init>()V = .ctor()
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
cn/jpush/android/service/ServiceInterface = CN.Jpush.Android.Service.ServiceInterface
  <init>()V = .ctor()
  a()Ljava/lang/String; = A()
  a(Landroid/content/Context;)V = A(Android.Content.Context)
  a(Landroid/content/Context;I)V = A(Android.Content.Context, int)
  a(Landroid/content/Context;IIII)Z = A(Android.Content.Context, int, int, int, int)
  a(Landroid/content/Context;Ljava/lang/Integer;Lcn/jpush/android/api/DefaultPushNotificationBuilder;)V = A(Android.Content.Context, Java.Lang.Integer, CN.Jpush.Android.Api.DefaultPushNotificationBuilder)
  a(Landroid/content/Context;Ljava/lang/String;)V = A(Android.Content.Context, string)
  a(Landroid/content/Context;Ljava/lang/String;Ljava/util/ArrayList;J)V = A(Android.Content.Context, string, System.Collections.Generic.IList<string>, long)
  b(Landroid/content/Context;)V = B(Android.Content.Context)
  b(Landroid/content/Context;I)V = B(Android.Content.Context, int)
  c(Landroid/content/Context;)Z = C(Android.Content.Context)
  c(Landroid/content/Context;I)V = C(Android.Content.Context, int)
  d(Landroid/content/Context;)Z = D(Android.Content.Context)
cn/jpush/android/service/TagAliasOperator = CN.Jpush.Android.Service.TagAliasOperator
  a()Lcn/jpush/android/service/TagAliasOperator; = A()
  a(Landroid/content/Context;)V = A(Android.Content.Context)
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
cn/jpush/android/ui/FullScreenView = CN.Jpush.Android.UI.FullScreenView
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  destory()V = Destory()
  loadUrl(Ljava/lang/String;)V = LoadUrl(string)
  pause()V = Pause()
  resume()V = Resume()
  showTitleBar()V = ShowTitleBar()
  webviewCanGoBack()Z = WebviewCanGoBack()
  webviewGoBack()V = WebviewGoBack()
cn/jpush/android/ui/PopWinActivity = CN.Jpush.Android.UI.PopWinActivity
  <init>()V = .ctor()
  a(Ljava/lang/String;)V = A(string)
cn/jpush/android/ui/PushActivity = CN.Jpush.Android.UI.PushActivity
  <init>()V = .ctor()
  a()V = A()
  b()V = B()
